# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Setup Java JDK
      uses: actions/setup-java@v4.2.1
      # with:
        # The Java version to set up. Takes a whole or semver Java version. See examples of supported syntax in README file
        # java-version: # optional
        # The path to the `.java-version` file. See examples of supported syntax in README file
        # java-version-file: # optional
        # Java distribution. See the list of supported distributions in README file
        # distribution: 
        # The package type (jdk, jre, jdk+fx, jre+fx)
        # java-package: # optional, default is jdk
        # The architecture of the package (defaults to the action runner's architecture)
        # architecture: # optional
        # Path to where the compressed JDK is located
        # jdkFile: # optional
        # Set this option if you want the action to check for the latest available version that satisfies the version spec
        #check-latest: # optional
        # ID of the distributionManagement repository in the pom.xml file. Default is `github`
        # server-id: github
        # Environment variable name for the username for authentication to the Apache Maven repository. Default is $GITHUB_ACTOR
        # server-username: # optional, default is GITHUB_ACTOR
        # Environment variable name for password or token for authentication to the Apache Maven repository. Default is $GITHUB_TOKEN
        # server-password: # optional, default is GITHUB_TOKEN
        # Path to where the settings.xml file will be written. Default is ~/.m2.
        # settings-path: # optional
        # Overwrite the settings.xml file if it exists. Default is "true".
        # overwrite-settings: # optional, default is true
        # GPG private key to import. Default is empty string.
        # gpg-private-key: # optional
        # Environment variable name for the GPG private key passphrase. Default is $GPG_PASSPHRASE.
        # gpg-passphrase: # optional
        # Name of the build platform to cache dependencies. It can be "maven", "gradle" or "sbt".
        # cache: # optional
        # The path to a dependency file: pom.xml, build.gradle, build.sbt, etc. This option can be used with the `cache` option. If this option is omitted, the action searches for the dependency file in the entire repository. This option supports wildcards and a list of file names for caching multiple dependencies.
        # cache-dependency-path: # optional
        # Workaround to pass job status to post job step. This variable is not intended for manual setting
        # job-status: # optional, default is ${{ job.status }}
        # The token used to authenticate when fetching version manifests hosted on github.com, such as for the Microsoft Build of OpenJDK. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
        # token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
        # Name of Maven Toolchain ID if the default name of "${distribution}_${java-version}" is not wanted. See examples of supported syntax in Advanced Usage file
        # mvn-toolchain-id: # optional
        # Name of Maven Toolchain Vendor if the default name of "${distribution}" is not wanted. See examples of supported syntax in Advanced Usage file
        # mvn-toolchain-vendor: # optional
          






    
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
